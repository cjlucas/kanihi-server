#!/usr/bin/env ruby

require 'json'
require 'net/http'
require 'optparse'
require 'uri'

submodules = ['common', 'source']
submodules.each { |sub| require File.expand_path("../ums_#{sub}", __FILE__) }

# this won't work if installing from a gemfile
RAILS_ROOT = File.expand_path('../..', __FILE__)
COMMANDS = ['source', 'help'].freeze
ACTIONS = {
  'source' => ['add', 'del', 'list', 'scan', 'help'],
}
UNSAFE = URI::REGEXP::PATTERN::RESERVED + ' '

require File.expand_path('config/environment', RAILS_ROOT)

# submodules
include MusicServer::Command::Common
include MusicServer::Command::Source

# helpers
include ActionView::Helpers::DateHelper

def puts_help
  puts [
    'Usage: ums [option] [action]',
    'Options:',
    '  source -- add/remove music sources',
  ]
end

def puts_command_help(command)
  p "ums source [#{ACTIONS[command].join('|')}] path1 path2 ..."
end

def valid_command?(command)
  !command.nil? && COMMANDS.include?(command.downcase)
end

def valid_action?(command, action)
  !action.nil? && ACTIONS[command].include?(action.downcase)
end


options = {}
options[:command] = ARGV.shift

# input checks
puts_help and exit unless valid_command?(options[:command])

case options[:command]
when 'source'
  action = ARGV.shift
  items = ARGV
  if valid_action?('source', action)
    source_cmd(action, items)
  else
    puts_command_help('source')
    exit 
  end
when 'help'
  puts_help
end


